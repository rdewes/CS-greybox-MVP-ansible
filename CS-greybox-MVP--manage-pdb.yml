- name: manage a PDB
  hosts: all
  vars:
    hostname:           "{{ p_host }}"
    port:               "{{ p_port }}"
    service_name:       "{{ p_service }}"
    sourcedb:           "{{ p_cdb_name }}"
    pdbname:            "{{ p_pdb_name }}"
    username:           "{{ p_sysdba_un }}"
    password:           "{{ p_sysdba_pw }}"
    mode:               sysdba
    state:              "{{ p_state }}"
    tablespaces:        "{{ p_tablespaces }}"
    oracle_home:        /u01/app/oracle/product/12.2.0/dbhome_1
    
  tasks:
    - name: non-cloning tasks
      block:
      - name: put the pdb into the required state
        oracle_pdb: 
          hostname:       "{{ hostname }}"
          port:           "{{ port }}"
          service_name:   "{{ service_name }}"
          sourcedb:       "{{ sourcedb }}"
          name:           "{{ pdbname }}"
          username:       "{{ username }}"
          password:       "{{ password }}"
          mode:           "{{ mode }}"
          state:          "{{ state }}"
          oracle_home:    "{{ oracle_home }}"
        register: p_pdb_out
      
      - name: show output from pdb state-management task
        debug:
          var: p_pdb_out.msg
    
      - name: create tablespace in pdb, iff it's newly created
        block:
        - name: retrieve service name so we can connect to the new pdb
          oracle_sql: 
            hostname:       "{{ hostname }}" 
            port:           "{{ port }}"
            service_name:   "{{ service_name }}"
            username:       "{{ username }}"
            password:       "{{ password }}"
            mode:           "{{ mode }}"
            sql:            >
                            select name 
                            from   v$services 
                            where  name like '{{ pdbname }}.%'
                            and    rownum = 1
          register: p_new_service_name
        
        - name: create tablespaces in new pdb, via the new service name
          oracle_tablespace:
            hostname:       "{{ hostname }}" 
            port:           "{{ port }}"
            service_name:   "{{ item.0 }}"                          # from p_new_service_name.msg
            user:           "{{ username }}"
            password:       "{{ password }}"
            mode:           "{{ mode }}"
            tablespace:     "{{ item.1.name }}"                     # from p_tablespaces
            size:           "{{ item.1.size }}"                     # from p_tablespaces
            state:          present
          with_nested: 
            - "{{ p_new_service_name.msg }}"                        # new service name
            - "{{ p_tablespaces }}"                                 # list of tablespace names and sizes
          register: p_tblspc_out
          
        - name: show output from tablespace creation
          debug:
            var: p_tblspc_out.results
        
        when: p_pdb_out.msg.find('Successfully created') != -1      # this is the test for whether the pdb has been newly created
      when: p_state != "clone"                                      # this is the test for the non-cloning case
      
    - name: cloning tasks
      block:
      - name: yes, we're cloning
        debug:
          msg: "entering the cloning block"
      when: p_state == "clone"                                      # this is the test for the cloning case
